use std::io::Result;

fn main() -> Result<()> {
    prost_build::compile_protos(
        &[
            "src/protobuf/proto/consensus/models/slot_data.proto",
            "src/protobuf/proto/consensus/models/block_header.proto",
            "src/protobuf/proto/consensus/models/operational_certificate.proto",
            "src/protobuf/proto/consensus/models/eligibility_certificate.proto",
            "src/protobuf/proto/consensus/models/staking.proto",
            "src/protobuf/proto/consensus/models/block_id.proto",
            "src/protobuf/proto/consensus/models/protocol_version.proto",
            "src/protobuf/proto/google/services/health_rpc.proto",
            "src/protobuf/proto/google/models/health_models.proto",
            "src/protobuf/proto/genus/genus_models.proto",
            "src/protobuf/proto/genus/genus_rpc.proto",
            "src/protobuf/proto/quivr/models/shared.proto",
            "src/protobuf/proto/quivr/models/proof.proto",
            "src/protobuf/proto/quivr/models/proposition.proto",
            "src/protobuf/proto/node/services/network_control.proto",
            "src/protobuf/proto/node/services/bifrost_rpc.proto",
            "src/protobuf/proto/node/services/regtest.proto",
            "src/protobuf/proto/node/models/node_config.proto",
            "src/protobuf/proto/node/models/node_epochData.proto",
            "src/protobuf/proto/node/models/block.proto",
            "src/protobuf/proto/node/models/p2p.proto",
            "src/protobuf/proto/brambl/models/identifier.proto",
            "src/protobuf/proto/brambl/models/event.proto",
            "src/protobuf/proto/brambl/models/indices.proto",
            "src/protobuf/proto/brambl/models/common.proto",
            "src/protobuf/proto/brambl/models/box/box.proto",
            "src/protobuf/proto/brambl/models/box/challenge.proto",
            "src/protobuf/proto/brambl/models/box/assets_statements.proto",
            "src/protobuf/proto/brambl/models/box/attestation.proto",
            "src/protobuf/proto/brambl/models/box/asset.proto",
            "src/protobuf/proto/brambl/models/box/lock.proto",
            "src/protobuf/proto/brambl/models/box/value.proto",
            "src/protobuf/proto/brambl/models/evidence.proto",
            "src/protobuf/proto/brambl/models/datum.proto",
            "src/protobuf/proto/brambl/models/transaction/io_transaction.proto",
            "src/protobuf/proto/brambl/models/transaction/unspent_transaction_output.proto",
            "src/protobuf/proto/brambl/models/transaction/spent_transaction_output.proto",
            "src/protobuf/proto/brambl/models/transaction/schedule.proto",
            "src/protobuf/proto/brambl/models/address.proto",
        ],
        &["src/protobuf/proto", "src/protobuf/external_proto"],
    )?;
    Ok(())
}
